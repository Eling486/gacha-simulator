{"version":3,"file":"pixi-sound.js","sources":["../src/Filterable.ts","../src/filters/Filter.ts","../src/instance.ts","../src/webaudio/WebAudioUtils.ts","../src/webaudio/WebAudioInstance.ts","../src/webaudio/WebAudioNodes.ts","../src/webaudio/WebAudioMedia.ts","../src/webaudio/WebAudioContext.ts","../src/filters/EqualizerFilter.ts","../src/filters/DistortionFilter.ts","../src/filters/StereoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/MonoFilter.ts","../src/filters/TelephoneFilter.ts","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/utils/supported.ts","../src/utils/resolveUrl.ts","../src/loader/SoundLoader.ts","../src/sprites/SoundSprite.ts","../src/Sound.ts","../src/SoundLibrary.ts","../src/utils/playOnce.ts","../src/utils/render.ts","../src/utils/sineTone.ts","../src/index.ts"],"sourcesContent":["import { Filter } from \"./filters/Filter\";\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n * @class Filterable\n * @memberof PIXI.sound\n * @param {AudioNode} source The source audio node\n * @param {AudioNode} destination The output audio node\n * @private\n */\nexport class Filterable\n{\n    /**\n     * Get the gain node\n     * @name PIXI.sound.Filterable#_input\n     * @type {AudioNode}\n     * @private\n     */\n    private _input: AudioNode;\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#_output\n     * @type {AudioNode}\n     * @private\n     */\n    private _output: AudioNode;\n\n    /**\n     * Collection of filters.\n     * @name PIXI.sound.Filterable#_filters\n     * @type {PIXI.sound.filters.Filter[]}\n     * @private\n     */\n    private _filters: Filter[];\n\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#destination\n     * @type {AudioNode}\n     * @readonly\n     */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /**\n     * The collection of filters\n     * @name PIXI.sound.Filterable#filters\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) => {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n            filters.forEach((filter: Filter) => {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.Filterable#destroy\n     */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n","/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Filter\n * @memberof PIXI.sound.filters\n * @param {AudioNode} destination The audio node to use as the destination for the input AudioNode\n * @param {AudioNode} [source] Optional output node, defaults to destination node. This is useful\n *        when creating filters which contains multiple AudioNode elements chained together.\n */\nexport class Filter\n{\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#destination\n     * @type {AudioNode}\n     */\n    public destination: AudioNode;\n\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#source\n     * @type {AudioNode}\n     */\n    public source: AudioNode;\n\n    constructor(destination: AudioNode, source?: AudioNode)\n    {\n        this.init(destination, source);\n    }\n\n    /**\n     * Reinitialize\n     * @method PIXI.sound.filters.Filter#init\n     * @private\n     */\n    protected init(destination: AudioNode, source?: AudioNode)\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @method PIXI.sound.filters.Filter#connect\n     * @param {AudioNode} destination The destination node to connect the output to\n     */\n    public connect(destination: AudioNode): void\n    {\n        this.source.connect(destination);\n    }\n\n    /**\n     * Completely disconnect filter from destination and source nodes.\n     * @method PIXI.sound.filters.Filter#disconnect\n     */\n    public disconnect(): void\n    {\n        this.source.disconnect();\n    }\n\n    /**\n     * Destroy the filter and don't use after this.\n     * @method PIXI.sound.filters.Filter#destroy\n     */\n    public destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n","import { SoundLibrary } from \"./SoundLibrary\";\n\n/**\n * Singletone instance of the SoundLibrary\n * @private\n */\nexport let instance: SoundLibrary;\n\n/**\n * Internal set function for the singleton instance.\n * @private\n * @param {PIXI.sound} sound - Sound library instance\n * @return {PIXI.sound}\n */\nexport function setInstance(sound: SoundLibrary) {\n    instance = sound;\n    return sound;\n}\n\n/**\n * Internal get function for the singleton instance.\n * @private\n * @return {PIXI.sound}\n */\nexport function getInstance(): SoundLibrary {\n    return instance;\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioContext } from \"./WebAudioContext\";\n\n/**\n * Internal class for Web Audio abstractions and convenience methods.\n * @private\n * @class WebAudioUtils\n * @memberof PIXI.sound.webaudio\n */\nexport class WebAudioUtils\n{\n    /**\n     * Dezippering is removed in the future Web Audio API, instead\n     * we use the `setValueAtTime` method, however, this is not available\n     * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n     * @method PIXI.sound.webaudio.WebAudioUtils.setParamValue\n     * @private\n     * @param {AudioParam} param - AudioNode parameter object\n     * @param {number} value - Value to set\n     * @return {number} The value set\n     */\n    public static setParamValue(param: AudioParam, value: number): number\n    {\n        if (param.setValueAtTime)\n        {\n            const context = getInstance().context as WebAudioContext;\n            param.setValueAtTime(value, context.audioContext.currentTime);\n        }\n        else\n        {\n            param.value = value;\n        }\n        return value;\n    }\n}\n","import { Ticker } from \"@pixi/ticker\";\nimport { EventEmitter } from \"@pixi/utils\";\nimport { IMediaInstance } from \"../interfaces\";\nimport { PlayOptions } from \"../Sound\";\nimport { WebAudioMedia } from \"./WebAudioMedia\";\nimport { WebAudioUtils } from \"./WebAudioUtils\";\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @private\n * @class WebAudioInstance\n * @memberof PIXI.sound.webaudio\n * @param {SoundNodes} source Reference to the SoundNodes.\n */\nexport class WebAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.webaudio.WebAudioInstance#id\n     * @readonly\n     */\n    public readonly id: number;\n\n    /**\n     * The source Sound.\n     * @type {PIXI.sound.webaudio.WebAudioMedia}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_media\n     * @private\n     */\n    private _media: WebAudioMedia;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * true if muted.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * The instance volume\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Last update frame number.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_lastUpdate\n     * @private\n     */\n    private _lastUpdate: number;\n\n    /**\n     * The total number of seconds elapsed in playback.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_elapsed\n     * @private\n     */\n    private _elapsed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * `true` if should be looping.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * Gain node for controlling volume of instance\n     * @type {GainNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_gain\n     * @private\n     */\n    private _gain: GainNode;\n\n    /**\n     * Length of the sound in seconds.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * The progress of the sound from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_progress\n     * @private\n     */\n    private _progress: number;\n\n    /**\n     * Audio buffer source clone from Sound object.\n     * @type {AudioBufferSourceNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_source\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._muted = false;\n        this._elapsed = 0;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @method PIXI.sound.webaudio.WebAudioInstance#set\n     * @param {string} name - Values include: 'speed', 'volume', 'muted', 'loop', 'paused'\n     * @param {number|boolean} value - Value to set property to\n     * @return {PIXI.sound.webaudio.WebAudioInstance}\n     */\n    public set(name: \"speed\" | \"volume\" | \"muted\" | \"loop\" | \"paused\", value: number | boolean)\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            this[name] = value;\n        }\n        return this;\n    }\n\n    /**\n     * Stops the instance, don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#stop\n     */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is stopped. Don't use after this is called.\n             * @event PIXI.sound.webaudio.WebAudioInstance#stop\n             */\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n        this._update(true); // update progress\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Refresh loop, volume and speed based on changes to parent\n     * @method PIXI.sound.webaudio.WebAudioInstance#refresh\n     */\n    public refresh(): void\n    {\n        // Sound could be paused\n        if (!this._source) {\n            return;\n        }\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Updating looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n\n        // Update the speed\n        WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.webaudio.WebAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Consider global and sound paused\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    start: this._elapsed % this._duration,\n                    end: this._end,\n                    speed: this._speed,\n                    loop: this._loop,\n                    volume: this._volume,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.webaudio.WebAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.webaudio.WebAudioInstance#play\n     * @param {Object} options Play options\n     * @param {number} options.start The position to start playing, in seconds.\n     * @param {number} options.end The ending position in seconds.\n     * @param {number} options.speed Speed for the instance\n     * @param {boolean} options.loop If the instance is looping, defaults to sound loop\n     * @param {number} options.volume Volume of the instance\n     * @param {boolean} options.muted Muted state of instance\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted} = options;\n\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        this._paused = false;\n        const {source, gain} = this._media.nodes.cloneBufferSource();\n\n        this._source = source;\n        this._gain = gain;\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        const duration: number = this._source.buffer.duration;\n        this._duration = duration;\n        this._end = end;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n\n        if (this._loop)\n        {\n            this._source.loopEnd = end;\n            this._source.loopStart = start;\n            this._source.start(0, start);\n        }\n        else if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.webaudio.WebAudioInstance#start\n         */\n        this.emit(\"start\");\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this._enabled = true;\n    }\n\n    /**\n     * Utility to convert time in millseconds or seconds\n     * @method PIXI.sound.webaudio.WebAudioInstance#_toSec\n     * @private\n     * @param {number} [time] Time in either ms or sec\n     * @return {number} Time in seconds\n     */\n    private _toSec(time?: number): number\n    {\n        if (time > 10)\n        {\n            time /= 1000;\n        }\n        return time || 0;\n    }\n\n    /**\n     * Start the update progress.\n     * @name PIXI.sound.webaudio.WebAudioInstance#_enabled\n     * @type {boolean}\n     * @private\n     */\n    private set _enabled(enabled: boolean)\n    {\n        Ticker.shared.remove(this._updateListener, this);\n        if (enabled)\n        {\n            Ticker.shared.add(this._updateListener, this);\n        }\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        if (this._gain)\n        {\n            this._gain.disconnect();\n            this._gain = null;\n        }\n        if (this._media)\n        {\n            this._media.context.events.off(\"refresh\", this.refresh, this);\n            this._media.context.events.off(\"refreshPaused\", this.refreshPaused, this);\n            this._media = null;\n        }\n        this._end = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._paused = false;\n        this._muted = false;\n        this._pausedReal = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#toString\n     * @return {string} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[WebAudioInstance id=\" + this.id + \"]\";\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_now\n     * @private\n     * @return {number} Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /**\n     * Callback for update listener\n     * @type {Function}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_updateListener\n     * @private\n     */\n    private _updateListener() {\n        this._update();\n    }\n\n    /**\n     * Internal update the progress.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_update\n     * @private\n     */\n    private _update(force: boolean = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                const speed: number = this._source.playbackRate.value;\n                this._elapsed += delta * speed;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                let progress: number;\n                if (this._source.loopStart)\n                {\n                    const soundLength = this._source.loopEnd - this._source.loopStart;\n                    progress = (this._source.loopStart + this._elapsed % soundLength) / duration;\n                }\n                else\n                {\n                    progress = (this._elapsed % duration) / duration;\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#progress\n                 * @property {number} progress Amount progressed from 0 to 1\n                 * @property {number} duration The total playback in seconds\n                 */\n                this.emit(\"progress\", this._progress, duration);\n            }\n        }\n    }\n\n    /**\n     * Initializes the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#init\n     */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n        media.context.events.on(\"refresh\", this.refresh, this);\n        media.context.events.on(\"refreshPaused\", this.refreshPaused, this);\n    }\n\n    /**\n     * Stops the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.stop(0); // param needed for iOS 8 bug\n            this._source.disconnect();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.disconnect();\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.webaudio.WebAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n}\n","import { Filterable } from \"../Filterable\";\nimport { Filter } from \"../filters/Filter\";\nimport { WebAudioContext } from \"./WebAudioContext\";\nimport { WebAudioUtils } from \"./WebAudioUtils\";\n\n/**\n * Output for cloneing node\n * @interface PIXI.sound.SoundNodes~SourceClone\n * @property {AudioBufferSourceNode} source Cloned audio buffer source\n * @property {GainNode} gain Independent volume control\n */\nexport interface SourceClone {\n    source: AudioBufferSourceNode;\n    gain: GainNode;\n}\n\n/**\n * @private\n * @class WebAudioNodes\n * @extends PIXI.sound.Filterable\n * @private\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.webaudio.WebAudioContext} audioContext The audio context.\n */\nexport class WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n     * script node on iOS, you'll need to provide a non-zero amount.\n     * @name PIXI.sound.SoundNodes.BUFFER_SIZE\n     * @type {number}\n     * @default 0\n     */\n    public static BUFFER_SIZE: number = 0;\n\n    /**\n     * Get the buffer source node\n     * @name PIXI.sound.SoundNodes#bufferSource\n     * @type {AudioBufferSourceNode}\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the gain node\n     * @name PIXI.sound.SoundNodes#gain\n     * @type {GainNode}\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @name PIXI.sound.SoundNodes#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @name PIXI.sound.SoundNodes#context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    /**\n     * Private reference to the script processor node.\n     * @name PIXI.sound.SoundNodes#_script\n     * @type {ScriptProcessorNode}\n     */\n    private _script: ScriptProcessorNode;\n\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Get the script processor node.\n     * @name PIXI.sound.SoundNodes#script\n     * @type {ScriptProcessorNode}\n     * @readonly\n     */\n    public get script()\n    {\n        if (!this._script)\n        {\n            this._script = this.context.audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n            this._script.connect(this.context.destination);\n        }\n        return this._script;\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.SoundNodes#destroy\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        if (this._script)\n        {\n            this._script.disconnect();\n        }\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this._script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @method PIXI.sound.SoundNodes#cloneBufferSource\n     * @returns {PIXI.sound.SoundNodes~SourceClone} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): SourceClone\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n        source.buffer = orig.buffer;\n        WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n        source.loop = orig.loop;\n\n        const gain: GainNode = this.context.audioContext.createGain();\n        source.connect(gain);\n        gain.connect(this.destination);\n        return { source, gain };\n    }\n\n    /**\n     * Get buffer size of `ScriptProcessorNode`.\n     * @type {number}\n     * @readonly\n     */\n    get bufferSize(): number\n    {\n        return this.script.bufferSize;\n    }\n}\n","import * as path from \"path\";\nimport { Filter } from \"../filters\";\nimport { IMedia } from \"../interfaces\";\nimport { CompleteCallback, LoadedCallback, Options, PlayOptions, Sound } from \"../Sound\";\nimport { SoundSprite, SoundSpriteData, SoundSprites } from \"../sprites\";\nimport { WebAudioContext } from \"./WebAudioContext\";\nimport { WebAudioInstance } from \"./WebAudioInstance\";\nimport { WebAudioNodes } from \"./WebAudioNodes\";\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n * @private\n * @class WebAudioMedia\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.Sound} parent - Instance of parent Sound container\n */\nexport class WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @name PIXI.sound.webaudio.WebAudioMedia#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @name PIXI.sound.webaudio.WebAudioMedia#source\n     * @type {ArrayBuffer}\n     * @readonly\n     */\n    public source: ArrayBuffer;\n\n    /**\n     * Instance of the chain builder.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     * @private\n     */\n    private _nodes: WebAudioNodes;\n\n    /**\n     * Instance of the source node.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_source\n     * @type {AudioBufferSourceNode}\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer;\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @private\n     * @method PIXI.sound.webaudio.WebAudioMedia#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n        return this._source.buffer.duration;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name PIXI.sound.webaudio.WebAudioMedia#buffer\n     * @type {AudioBuffer}\n     */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Get the current chained nodes object\n     * @private\n     * @name PIXI.sound.webaudio.WebAudioMedia#nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the arraybuffer, incase it was loaded outside\n        if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        // Load from the file path\n        else if (this.parent.url)\n        {\n            this._loadUrl(callback);\n        }\n        else if (callback)\n        {\n            callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n        else\n        {\n            console.error(\"sound.url or sound.source must be set\");\n        }\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method PIXI.sound.webaudio.WebAudioMedia#_loadUrl\n     * @private\n     */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const url: string = this.parent.url;\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.source = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method PIXI.sound.webaudio.WebAudioMedia#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\n    {\n        const context = this.parent.context as WebAudioContext;\n        context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        });\n    }\n}\n","import { EventEmitter } from \"@pixi/utils\";\nimport { Filterable } from \"../Filterable\";\nimport { IMediaContext } from \"../interfaces\";\n\n/**\n * Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > compressor > context.destination.\n * any filters that are added are inserted between the analyser and compressor nodes\n * @private\n * @class WebAudioContext\n * @extends PIXI.sound.Filterable\n * @memberof PIXI.sound.webaudio\n */\nexport class WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Context Compressor node\n     * @name PIXI.sound.webaudio.WebAudioContext#compressor\n     * @type {DynamicsCompressorNode}\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @name PIXI.sound.webaudio.WebAudioContext#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Global speed of all sounds\n     * @name PIXI.sound.webaudio.WebAudioContext#speed\n     * @type {number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * Sets the muted state.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#muted\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioContext#volume\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Handle global events\n     * @type {PIXI.utils.EventEmitter}\n     * @name PIXI.sound.webaudio.WebAudioContext#events\n     * @default 1\n     */\n    public events: EventEmitter;\n\n    /**\n     * The instance of the AudioContext for WebAudio API.\n     * @name PIXI.sound.webaudio.WebAudioContext#_ctx\n     * @type {AudioContext}\n     * @private\n     */\n    private _ctx: AudioContext;\n\n    /**\n     * The instance of the OfflineAudioContext for fast decoding audio.\n     * @name PIXI.sound.webaudio.WebAudioContext#_offlineCtx\n     * @type {OfflineAudioContext}\n     * @private\n     */\n    private _offlineCtx: OfflineAudioContext;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.webaudio.WebAudioContext#_paused\n     * @type {boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     * @name PIXI.sound.webaudio.WebAudioContext#_unlocked\n     * @type {boolean}\n     * @private\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const win: any = window as any;\n        const ctx = new WebAudioContext.AudioContext();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, compressor);\n\n        this._ctx = ctx;\n        // ios11 safari's webkitOfflineAudioContext allows only 44100 Hz sample rate\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2,\n            (win.OfflineAudioContext) ? ctx.sampleRate : 44100);\n        this._unlocked = false;\n\n        this.compressor = compressor;\n        this.analyser = analyser;\n        this.events = new EventEmitter();\n\n        // Set the defaults\n        this.volume = 1;\n        this.speed = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio. See the _unlock method.\n        if (ctx.state !== \"running\")\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener(\"mousedown\", this._unlock, true);\n            document.addEventListener(\"touchstart\", this._unlock, true);\n            document.addEventListener(\"touchend\", this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     * @method PIXI.sound.webaudio.WebAudioContext#_unlock\n     * @private\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === \"running\")\n        {\n            document.removeEventListener(\"mousedown\", this._unlock, true);\n            document.removeEventListener(\"touchend\", this._unlock, true);\n            document.removeEventListener(\"touchstart\", this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     * @method PIXI.sound.webaudio.WebAudioContext#playEmptySound\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n        if (source.context.state === \"suspended\")\n        {\n            source.context.resume();\n        }\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.AudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.AudioContext ||\n            win.webkitAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.OfflineAudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.OfflineAudioContext ||\n            win.webkitOfflineAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Destroy this context.\n     * @method PIXI.sound.webaudio.WebAudioContext#destroy\n     */\n    public destroy()\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n        if (typeof ctx.close !== \"undefined\")\n        {\n            ctx.close();\n        }\n        this.events.removeAllListeners();\n        this.analyser.disconnect();\n        this.compressor.disconnect();\n        this.analyser = null;\n        this.compressor = null;\n        this.events = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#audioContext\n     * @type {AudioContext}\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#offlineContext\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Pauses all sounds, even though we handle this at the instance\n     * level, we'll also pause the audioContext so that the\n     * time used to compute progress isn't messed up.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === \"running\")\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === \"suspended\")\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.events.emit(\"refresh\");\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.events.emit(\"refreshPaused\");\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.webaudio.WebAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.webaudio.WebAudioContext#togglePause\n     * @return {boolean} The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @method PIXI.sound.webaudio.WebAudioContext#decode\n     * @param {ArrayBuffer} arrayBuffer Buffer from loader\n     * @param {Function} callback When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) => {\n                callback(null, buffer);\n            },\n            (err) => {\n                callback(new Error(err.message || \"Unable to decode file\"));\n            },\n        );\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\ninterface Band {\n    f: number;\n    type: string;\n    gain: number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @class EqualizerFilter\n * @memberof PIXI.sound.filters\n * @param {number} [f32=0] Default gain for 32 Hz\n * @param {number} [f64=0] Default gain for 64 Hz\n * @param {number} [f125=0] Default gain for 125 Hz\n * @param {number} [f250=0] Default gain for 250 Hz\n * @param {number} [f500=0] Default gain for 500 Hz\n * @param {number} [f1k=0] Default gain for 1000 Hz\n * @param {number} [f2k=0] Default gain for 2000 Hz\n * @param {number} [f4k=0] Default gain for 4000 Hz\n * @param {number} [f8k=0] Default gain for 8000 Hz\n * @param {number} [f16k=0] Default gain for 16000 Hz\n */\nexport class EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F32\n     * @type {number}\n     * @readonly\n     */\n    public static F32: number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F64\n     * @type {number}\n     * @readonly\n     */\n    public static F64: number = 64;\n\n    /**\n     * Band at 125 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F125\n     * @type {number}\n     * @readonly\n     */\n    public static F125: number = 125;\n\n    /**\n     * Band at 250 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F250\n     * @type {number}\n     * @readonly\n     */\n    public static F250: number = 250;\n\n    /**\n     * Band at 500 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F500\n     * @type {number}\n     * @readonly\n     */\n    public static F500: number = 500;\n\n    /**\n     * Band at 1000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F1K\n     * @type {number}\n     * @readonly\n     */\n    public static F1K: number = 1000;\n\n    /**\n     * Band at 2000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F2K\n     * @type {number}\n     * @readonly\n     */\n    public static F2K: number = 2000;\n\n    /**\n     * Band at 4000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F4K\n     * @type {number}\n     * @readonly\n     */\n    public static F4K: number = 4000;\n\n    /**\n     * Band at 8000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F8K\n     * @type {number}\n     * @readonly\n     */\n    public static F8K: number = 8000;\n\n    /**\n     * Band at 16000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F16K\n     * @type {number}\n     * @readonly\n     */\n    public static F16K: number = 16000;\n\n    /**\n     * The list of bands\n     * @name PIXI.sounds.filters.EqualizerFilter#bands\n     * @type {BiquadFilterNode[]}\n     * @readonly\n     */\n    public bands: BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\n     * @type {Object}\n     * @readonly\n     */\n    public bandsMap: {[id: number]: BiquadFilterNode};\n\n    constructor(f32: number = 0, f64: number = 0, f125: number = 0, f250: number = 0, f500: number = 0,\n                f1k: number = 0, f2k: number = 0, f4k: number = 0, f8k: number = 0, f16k: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const equalizerBands: Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: \"lowshelf\",\n                gain: f32,\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: \"peaking\",\n                gain: f64,\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: \"peaking\",\n                gain: f125,\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: \"peaking\",\n                gain: f250,\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: \"peaking\",\n                gain: f500,\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: \"peaking\",\n                gain: f1k,\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: \"peaking\",\n                gain: f2k,\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: \"peaking\",\n                gain: f4k,\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: \"peaking\",\n                gain: f8k,\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: \"highshelf\",\n                gain: f16k,\n            },\n        ];\n\n        const bands: BiquadFilterNode[] = equalizerBands.map((band: Band) =>\n        {\n            const node: BiquadFilterNode = getInstance().context.audioContext.createBiquadFilter();\n            node.type = band.type as BiquadFilterType;\n            WebAudioUtils.setParamValue(node.Q, 1);\n            node.frequency.value = band.f; // WebAudioUtils.setParamValue(filter.frequency, band.f);\n            WebAudioUtils.setParamValue(node.gain, band.gain);\n            return node;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node: BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#setGain\n     * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\n     * @param {number} [gain=0] Recommended -40 to 40.\n     */\n    public setGain(frequency: number, gain: number = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(\"No band found for frequency \" + frequency);\n        }\n        WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#getGain\n     * @return {number} The amount of gain set.\n     */\n    public getGain(frequency: number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(\"No band found for frequency \" + frequency);\n        }\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f32\n     * @type {number}\n     * @default 0\n     */\n    public set f32(value: number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f64\n     * @type {number}\n     * @default 0\n     */\n    public set f64(value: number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f125\n     * @type {number}\n     * @default 0\n     */\n    public set f125(value: number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f250\n     * @type {number}\n     * @default 0\n     */\n    public set f250(value: number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f500\n     * @type {number}\n     * @default 0\n     */\n    public set f500(value: number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f1k\n     * @type {number}\n     * @default 0\n     */\n    public set f1k(value: number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f2k\n     * @type {number}\n     * @default 0\n     */\n    public set f2k(value: number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f4k\n     * @type {number}\n     * @default 0\n     */\n    public set f4k(value: number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f8k\n     * @type {number}\n     * @default 0\n     */\n    public set f8k(value: number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f16k\n     * @type {number}\n     * @default 0\n     */\n    public set f16k(value: number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /**\n     * Reset all frequency bands to have gain of 0\n     * @method PIXI.sound.filters.EqualizerFilter#reset\n     */\n    public reset(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) => {\n            WebAudioUtils.setParamValue(band.gain, 0);\n        });\n    }\n\n    public destroy(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) => {\n            band.disconnect();\n        });\n        this.bands = null;\n        this.bandsMap = null;\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding adding delaynode.\n *\n * @class DistortionFilter\n * @memberof PIXI.sound.filters\n * @param {number} [amount=0] The amount of distoration from 0 to 1.\n */\nexport class DistortionFilter extends Filter\n{\n    /**\n     * The Wave shape node use to distort\n     * @name PIXI.sound.filters.DistortionFilter#_distortion\n     * @type {WaveShaperNode}\n     * @private\n     */\n    private _distortion: WaveShaperNode;\n\n    /**\n     * The amount of distoration\n     * @name PIXI.sound.filters.DistortionFilter#_amount\n     * @type {number}\n     * @private\n     */\n    private _amount: number;\n\n    constructor(amount: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {context} = getInstance();\n        const distortion: WaveShaperNode = context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /**\n     * @name PIXI.sound.filters.Distoration#amount\n     * @type {number}\n     */\n    set amount(value: number)\n    {\n        value *= 1000;\n        this._amount = value;\n        const samples: number = 44100;\n        const curve: Float32Array = new Float32Array(samples);\n        const deg: number = Math.PI / 180;\n\n        let i: number = 0;\n        let x: number;\n\n        for (; i < samples; ++i)\n        {\n            x = i * 2 / samples - 1;\n            curve[i] = (3 + value) * x * 20 * deg / (Math.PI + value * Math.abs(x));\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = \"4x\";\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    public destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding Stereo panning.\n *\n * @class StereoFilter\n * @memberof PIXI.sound.filters\n * @param {number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\n */\nexport class StereoFilter extends Filter\n{\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_stereo\n     * @type {StereoPannerNode}\n     * @private\n     */\n    private _stereo: StereoPannerNode;\n\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_panner\n     * @type {PannerNode}\n     * @private\n     */\n    private _panner: PannerNode;\n\n    /**\n     * The amount of panning, -1 is left, 1 is right, 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#_pan\n     * @type {number}\n     * @private\n     */\n    private _pan: number;\n\n    constructor(pan: number = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        let stereo: StereoPannerNode;\n        let panner: PannerNode;\n        let destination: AudioNode;\n        const {audioContext} = getInstance().context;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = \"equalpower\";\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /**\n     * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#pan\n     * @type {number}\n     */\n    set pan(value: number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            WebAudioUtils.setParamValue(this._stereo.pan, value);\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    public destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Filter for adding reverb. Refactored from\n * https://github.com/web-audio-components/simple-reverb/\n *\n * @class ReverbFilter\n * @memberof PIXI.sound.filters\n * @param {number} [seconds=3] Seconds for reverb\n * @param {number} [decay=2] The decay length\n * @param {boolean} [reverse=false] Reverse reverb\n */\nexport class ReverbFilter extends Filter\n{\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_seconds\n     * @type {number}\n     * @private\n     */\n    private _seconds: number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_decay\n     * @type {number}\n     * @private\n     */\n    private _decay: number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_reverse\n     * @type {number}\n     * @private\n     */\n    private _reverse: boolean;\n\n    constructor(seconds: number = 3, decay: number = 2, reverse: boolean = false)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        super(null);\n\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @method PIXI.sound.filters.ReverbFilter#_clamp\n     * @private\n     * @param {number} value\n     * @param {number} min Minimum value\n     * @param {number} max Maximum value\n     * @return {number} Clamped number\n     */\n    private _clamp(value: number, min: number, max: number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Length of reverb in seconds from 1 to 50\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 3\n     */\n    get seconds(): number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds: number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 2\n     */\n    get decay(): number\n    {\n        return this._decay;\n    }\n    set decay(decay: number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @name PIXI.sound.filters.ReverbFilter#reverse\n     * @type {boolean}\n     * @default false\n     */\n    get reverse(): boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse: boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     * @method PIXI.sound.filters.ReverbFilter#_rebuild\n     * @private\n     */\n    private _rebuild(): void\n    {\n        const context = getInstance().context.audioContext;\n        const rate: number = context.sampleRate;\n        const length: number = rate * this._seconds;\n        const impulse: AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL: Float32Array = impulse.getChannelData(0);\n        const impulseR: Float32Array = impulse.getChannelData(1);\n        let n: number;\n\n        for (let i: number = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n        }\n        const convolver = getInstance().context.audioContext.createConvolver();\n        convolver.buffer = impulse;\n        this.init(convolver);\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Combine all channels into mono channel.\n *\n * @class MonoFilter\n * @memberof PIXI.sound.filters\n */\nexport class MonoFilter extends Filter\n{\n    /**\n     * Merger node\n     * @name PIXI.sound.filters.MonoFilter#_merge\n     * @type {ChannelMergerNode}\n     * @private\n     */\n    private _merger: ChannelMergerNode;\n\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n        const audioContext: AudioContext = getInstance().context.audioContext;\n        const splitter: ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger: ChannelMergerNode = audioContext.createChannelMerger();\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n","import { getInstance } from \"../instance\";\nimport { WebAudioUtils } from \"../webaudio\";\nimport { Filter } from \"./Filter\";\n\n/**\n * Creates a telephone-sound filter.\n *\n * @class TelephoneFilter\n * @memberof PIXI.sound.filters\n */\nexport class TelephoneFilter extends Filter\n{\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {audioContext} = getInstance().context;\n        const lpf1 = audioContext.createBiquadFilter();\n        const lpf2 = audioContext.createBiquadFilter();\n        const hpf1 = audioContext.createBiquadFilter();\n        const hpf2 = audioContext.createBiquadFilter();\n\n        lpf1.type = \"lowpass\";\n        WebAudioUtils.setParamValue(lpf1.frequency, 2000.0);\n\n        lpf2.type = \"lowpass\";\n        WebAudioUtils.setParamValue(lpf2.frequency, 2000.0);\n\n        hpf1.type = \"highpass\";\n        WebAudioUtils.setParamValue(hpf1.frequency, 500.0);\n\n        hpf2.type = \"highpass\";\n        WebAudioUtils.setParamValue(hpf2.frequency, 500.0);\n\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n\n        super(lpf1, hpf2);\n    }\n}\n","import { Ticker } from \"@pixi/ticker\";\nimport { EventEmitter } from \"@pixi/utils\";\nimport { IMediaInstance } from \"../interfaces/IMediaInstance\";\nimport { PlayOptions } from \"../Sound\";\nimport { HTMLAudioMedia } from \"./HTMLAudioMedia\";\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @private\n * @class HTMLAudioInstance\n * @memberof PIXI.sound.htmlaudio\n */\nexport class HTMLAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /**\n     * Extra padding, in seconds, to deal with low-latecy of HTMLAudio.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance.PADDING\n     * @readonly\n     * @default 0.1\n     */\n    public static PADDING: number = 0.1;\n\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#id\n     * @readonly\n     */\n    public readonly id: number;\n\n    /**\n     * The instance of the Audio element.\n     * @type {HTMLAudioElement}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\n     * @private\n     */\n    private _source: HTMLAudioElement;\n\n    /**\n     * The instance of the Audio media element.\n     * @type {PIXI.sound.htmlaudio.HTMLAudioMedia}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_media\n     * @private\n     */\n    private _media: HTMLAudioMedia;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * Current instance paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * Current instance muted state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * Current actual paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * Total length of the audio.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_start\n     * @private\n     */\n    private _start: number;\n\n    /**\n     * `true` if the audio is actually playing.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_playing\n     * @private\n     */\n    private _playing: boolean;\n\n    /**\n     * Volume for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Speed for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * `true` for looping the playback\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#set\n     * @param {string} name - Values include: 'speed', 'volume', 'muted', 'loop', 'paused'\n     * @param {number|boolean} value - Value to set property to\n     * @return {PIXI.sound.htmlaudio.HTMLAudioInstance}\n     */\n    public set(name: \"speed\" | \"volume\" | \"muted\" | \"loop\" | \"paused\", value: number | boolean)\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            this[name] = value;\n        }\n        return this;\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        const {currentTime} = this._source;\n        return currentTime / this._duration;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#init\n     * @param {PIXI.sound.htmlaudio.HTMLAudioMedia} media\n     */\n    public init(media: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = media.source.duration;\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\n        source.src = media.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n        media.context.on(\"refresh\", this.refresh, this);\n        media.context.on(\"refreshPaused\", this.refreshPaused, this);\n        this._media = media;\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#stop\n     */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Call whenever the loop, speed or volume changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refresh\n     */\n    public refresh(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Update the looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\n\n        // Update the speed\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Handle the paused state\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    start: this._source.currentTime,\n                    end: this._end,\n                    volume: this._volume,\n                    speed: this._speed,\n                    loop: this._loop,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.htmlaudio.HTMLAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Start playing the sound/\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#play\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted} = options;\n\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            console.warn('Looping not support when specifying an \"end\" time');\n            this.loop = false;\n        }\n\n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () => {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit(\"progress\", start, this._duration);\n                Ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        this._source.play();\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#start\n         */\n        this.emit(\"start\");\n    }\n\n    /**\n     * Handle time update on sound.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onUpdate\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit(\"progress\", this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._end = null;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n        this._pausedReal = false;\n        this._paused = false;\n        this._muted = false;\n\n        if (this._media)\n        {\n            this._media.context.off(\"refresh\", this.refresh, this);\n            this._media.context.off(\"refreshPaused\", this.refreshPaused, this);\n            this._media = null;\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[HTMLAudioInstance id=\" + this.id + \"]\";\n    }\n}\n","import { EventEmitter } from \"@pixi/utils\";\nimport { Filter } from \"../filters/Filter\";\nimport { IMedia } from \"../interfaces/IMedia\";\nimport { CompleteCallback, LoadedCallback, Options, PlayOptions, Sound } from \"../Sound\";\nimport { SoundSpriteData, SoundSprites } from \"../sprites\";\nimport { HTMLAudioContext } from \"./HTMLAudioContext\";\nimport { HTMLAudioInstance } from \"./HTMLAudioInstance\";\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioMedia\n * @memberof PIXI.sound.htmlaudio\n * @param {HTMLAudioElement|String|Object} options Either the path or url to the source file.\n *        or the object of options to use. See {@link PIXI.sound.Sound.from}\n */\nexport class HTMLAudioMedia extends EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    // Implement duration\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    // Implement context\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        console.warn(\"HTML Audio does not support filters\");\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = \"\";\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @name PIXI.sound.legacy.LegacySound#source\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            return callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener(\"canplaythrough\", onLoad);\n            source.removeEventListener(\"load\", onLoad);\n            source.removeEventListener(\"abort\", onAbort);\n            source.removeEventListener(\"error\", onError);\n        };\n\n        const onLoad = () =>\n        {\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error(\"Sound loading has been aborted\"));\n            }\n        };\n\n        const onError = () =>\n        {\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Listen for callback\n        source.addEventListener(\"canplaythrough\", onLoad, false);\n        source.addEventListener(\"load\", onLoad, false);\n        source.addEventListener(\"abort\", onAbort, false);\n        source.addEventListener(\"error\", onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n","import { EventEmitter } from \"@pixi/utils\";\nimport { Filter } from \"../filters/Filter\";\nimport { IMediaContext } from \"../interfaces/IMediaContext\";\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioContext\n * @extends PIXI.util.EventEmitter\n * @memberof PIXI.sound.htmlaudio\n */\nexport class HTMLAudioContext extends EventEmitter implements IMediaContext\n{\n    /**\n     * Current global speed from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#speed\n     * @type {number}\n     * @default 1\n     */\n    public speed: number;\n\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#muted\n     * @type {boolean}\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#volume\n     * @type {number}\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#paused\n     * @type {boolean}\n     * @default false\n     */\n    public paused: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.speed = 1;\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n    }\n\n    /**\n     * Internal trigger when volume, mute or speed changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.emit(\"refresh\");\n    }\n\n    /**\n     * Internal trigger paused changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.emit(\"refreshPaused\");\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     * @type {Array<PIXI.sound.filters.Filter>}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#filters\n     * @default null\n     */\n    public get filters(): Filter[]\n    {\n        console.warn(\"HTML Audio does not support filters\");\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        console.warn(\"HTML Audio does not support filters\");\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @type {null}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#audioContext\n     * @default null\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        console.warn(\"HTML Audio does not support audioContext\");\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#togglePause\n     * @return {boolean} The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this.paused;\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}\n","export type ExtensionMap = {[key: string]: boolean};\n\n/**\n * The list of extensions that can be played.\n * @readonly\n * @static\n * @member {string[]} PIXI.sound.utils.extensions\n */\nexport const extensions: string[] = [\n    \"mp3\",\n    \"ogg\",\n    \"oga\",\n    \"opus\",\n    \"mpeg\",\n    \"wav\",\n    \"m4a\",\n    \"aiff\",\n    \"wma\",\n    \"mid\",\n];\n\n/**\n * Internal function to validate file type formats\n * @private\n * @return {object} map of support by type\n */\nfunction validateFormats(): ExtensionMap {\n    const overrides: {[key: string]: string} = {\n        m4a: \"mp4\",\n        oga: \"ogg\",\n    };\n    const audio = document.createElement(\"audio\");\n    const formats: ExtensionMap = {};\n    const no = /^no$/;\n    extensions.forEach((ext) => {\n        const type = overrides[ext] || ext;\n        const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, \"\");\n        const canByType = audio.canPlayType(`audio/${type}`).replace(no, \"\");\n        formats[ext] = !!canByExt || !!canByType;\n    });\n    return Object.freeze(formats);\n}\n\n/**\n * The list of browser supported audio formats.\n * @readonly\n * @static\n * @member {Object} PIXI.sound.utils.supported\n * @property {boolean} mp3 - `true` if file-type is supported\n * @property {boolean} ogg - `true` if file-type is supported\n * @property {boolean} oga - `true` if file-type is supported\n * @property {boolean} opus - `true` if file-type is supported\n * @property {boolean} mpeg - `true` if file-type is supported\n * @property {boolean} wav - `true` if file-type is supported\n * @property {boolean} aiff - `true` if file-type is supported\n * @property {boolean} wma - `true` if file-type is supported\n * @property {boolean} mid - `true` if file-type is supported\n */\nexport const supported = validateFormats();\n","import { LoaderResource } from \"@pixi/loaders\";\nimport { supported } from \"./supported\";\n\n/**\n * RegExp for looking for format patterns.\n * @static\n * @private\n */\nconst FORMAT_PATTERN = /\\.(\\{([^\\}]+)\\})(\\?.*)?$/;\n\n/**\n * Resolve a URL with different formats in glob pattern to\n * a path based on the supported browser format. For instance:\n * \"sounds/music.{ogg,mp3}\", would resolve to \"sounds/music.ogg\"\n * if \"ogg\" support is found, otherwise, fallback to \"sounds.music.mp3\"\n * @method PIXI.sound.utils.resolveUrl\n * @static\n * @param {string|PIXI.LoaderResource} source - Path to resolve or Resource, if\n *        a Resource object is provided, automatically updates the extension and url\n *        of that object.\n * @return {string} The format to resolve to\n */\nexport function resolveUrl(source: string | PIXI.LoaderResource): string\n{\n    // search for patterns like \".{mp3,ogg}\"\"\n    const glob = FORMAT_PATTERN;\n    const url: string = typeof source === \"string\" ? source : source.url;\n\n    if (!glob.test(url))\n    {\n        return url;\n    }\n    else\n    {\n        const match = glob.exec(url);\n        const exts = match[2].split(\",\");\n        let replace = exts[exts.length - 1]; // fallback to last ext\n        for (let i = 0, len = exts.length; i < len; i++)\n        {\n            const ext = exts[i];\n            if (supported[ext])\n            {\n                replace = ext;\n                break;\n            }\n        }\n        const resolved = url.replace(match[1], replace);\n        if (!(typeof source === \"string\"))\n        {\n            source.extension = replace;\n            source.url = resolved;\n        }\n        return resolved;\n    }\n}\n","import { LoaderResource } from \"@pixi/loaders\";\nimport { getInstance } from \"../instance\";\nimport { resolveUrl } from \"../utils/resolveUrl\";\nimport { extensions } from \"../utils/supported\";\n\n/**\n * Sound middleware installation utilities for PIXI.Loader\n * @class\n * @private\n */\nexport class SoundLoader\n{\n    /**\n     * Install the middleware\n     * @method PIXI.sound.loader.add\n     * @param {PIXI.sound.SoundLibrary} sound - Instance of sound library\n     */\n    public static add()\n    {\n        SoundLoader.legacy = getInstance().useLegacy;\n    }\n\n    /**\n     * Set the legacy mode\n     * @name PIXI.sound.loader.legacy\n     * @type {boolean}\n     * @private\n     */\n    static set legacy(legacy: boolean)\n    {\n        // Configure PIXI Loader to handle audio files correctly\n        const exts = extensions;\n\n        // Make sure we support webaudio\n        if (!legacy)\n        {\n            // Load all audio files as ArrayBuffers\n            exts.forEach((ext) => {\n                LoaderResource.setExtensionXhrType(ext, LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n                LoaderResource.setExtensionLoadType(ext, LoaderResource.LOAD_TYPE.XHR);\n            });\n        }\n        else\n        {\n            // Fall back to loading as <audio> elements\n            exts.forEach((ext) => {\n                LoaderResource.setExtensionXhrType(ext, LoaderResource.XHR_RESPONSE_TYPE.DEFAULT);\n                LoaderResource.setExtensionLoadType(ext, LoaderResource.LOAD_TYPE.AUDIO);\n            });\n        }\n    }\n\n    /**\n     * Handle the preprocessing of file paths\n     */\n    public static pre(resource: PIXI.LoaderResource, next: () => void): void\n    {\n        resolveUrl(resource);\n        next();\n    }\n\n    /**\n     * Actual resource-loader middleware for sound class\n     */\n    public static use(resource: PIXI.LoaderResource, next: () => void): void\n    {\n        if (resource.data && extensions.indexOf(resource.extension) > -1)\n        {\n            (resource as any).sound = getInstance().add(resource.name, {\n                loaded: next,\n                preload: true,\n                url: resource.url,\n                source: resource.data,\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n}\n","import { IMediaInstance } from \"../interfaces\";\nimport { CompleteCallback, Sound } from \"../Sound\";\n\n// Sound sprite data setup\nexport interface SoundSpriteData {\n    start: number;\n    end: number;\n    speed?: number;\n}\n\n// Collection of sound sprites\nexport type SoundSprites = {[id: string]: SoundSprite};\n\n/**\n * Object that represents a single Sound's sprite.\n * @class SoundSprite\n * @memberof PIXI.sound\n * @param {PIXI.sound.Sound} parent The parent sound\n * @param {Object} options Data associated with object.\n * @param {number} options.start The start time in seconds.\n * @param {number} options.end The end time in seconds.\n * @param {number} [options.speed] The optional speed, if not speed, uses\n *        the default speed of the parent.\n */\nexport class SoundSprite\n{\n    /**\n     * The reference sound\n     * @name PIXI.sound.SoundSprite#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @name PIXI.sound.SoundSprite#start\n     * @type {number}\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @name PIXI.sound.SoundSprite#end\n     * @type {number}\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @name PIXI.sound.SoundSprite#speed\n     * @type {number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @name PIXI.sound.SoundSprite#duration\n     * @type {number}\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Whether to loop the sound sprite.\n     * @name PIXI.sound.SoundSprite#loop\n     * @type {boolean}\n     * @readonly\n     */\n    public loop: boolean;\n\n    /**\n     * Constructor\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        console.assert(this.duration > 0, \"End time must be after start time\");\n    }\n\n    /**\n     * Play the sound sprite.\n     * @method PIXI.sound.SoundSprite#play\n     * @param {PIXI.sound.Sound~completeCallback} [complete] Function call when complete\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.parent.play({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n            loop: this.loop});\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.SoundSprite#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n","import { Filter } from \"./filters\";\nimport { HTMLAudioMedia } from \"./htmlaudio\";\nimport { getInstance } from \"./instance\";\nimport { IMedia, IMediaContext, IMediaInstance } from \"./interfaces\";\nimport { SoundSprite, SoundSpriteData, SoundSprites } from \"./sprites\";\nimport { resolveUrl } from \"./utils/resolveUrl\";\nimport { WebAudioMedia } from \"./webaudio\";\n\n// Constructor options\nexport interface Options {\n    autoPlay?: boolean;\n    singleInstance?: boolean;\n    volume?: number;\n    speed?: number;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    preload?: boolean;\n    loop?: boolean;\n    url?: string;\n    source?: ArrayBuffer | HTMLAudioElement;\n    sprites?: {[id: string]: SoundSpriteData};\n}\n\n// Interface for play options\nexport interface PlayOptions {\n    start?: number;\n    end?: number;\n    speed?: number;\n    loop?: boolean;\n    volume?: number;\n    sprite?: string;\n    muted?: boolean;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n}\n\n/**\n * Callback when sound is loaded.\n * @callback PIXI.sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {PIXI.sound.Sound} sound The instance of new sound.\n * @param {PIXI.sound.IMediaInstance} instance The instance of auto-played sound.\n */\nexport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @callback PIXI.sound.Sound~completeCallback\n * @param {PIXI.sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound: Sound) => void;\n\n/**\n * Sound represents a single piece of loaded media. When playing a sound {@link PIXI.sound.IMediaInstance} objects\n * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\n * @class Sound\n * @memberof PIXI.sound\n */\nexport class Sound\n{\n    /**\n     * Pool of instances\n     * @name PIXI.sound.Sound#_pool\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @name PIXI.sound.Sound#isLoaded\n     * @type {boolean}\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @name PIXI.sound.Sound#isPlaying\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @name PIXI.sound.Sound#autoPlay\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @name PIXI.sound.Sound#singleInstance\n     * @type {boolean}\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @name PIXI.sound.Sound#preload\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @name PIXI.sound.Sound#url\n     * @type {String}\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @name PIXI.sound.Sound#options\n     * @type {Object}\n     * @readonly\n     */\n    public options: Options;\n\n    /**\n     * The audio source\n     * @name PIXI.sound.Sound#media\n     * @type {PIXI.sound.IMedia}\n     * @private\n     */\n    public media: IMedia;\n\n    /**\n     * The collection of instances being played.\n     * @name PIXI.sound.Sound#_instances\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private _instances: IMediaInstance[];\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_sprites\n     * @type {SoundContext}\n     * @private\n     */\n    private _sprites: SoundSprites;\n\n    /**\n     * The options when auto-playing.\n     * @name PIXI.sound.Sound#_autoPlayOptions\n     * @type {PlayOptions}\n     * @private\n     */\n    private _autoPlayOptions: PlayOptions;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_volume\n     * @type {number}\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * The internal paused state.\n     * @name PIXI.sound.Sound#_paused\n     * @type {boolean}\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * The internal muted state.\n     * @name PIXI.sound.Sound#_muted\n     * @type {boolean}\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_loop\n     * @type {boolean}\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * The internal playbackRate\n     * @name PIXI.sound.Sound#_speed\n     * @type {number}\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @method PIXI.sound.Sound.from\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {HTMLAudioElement|ArrayBuffer} [options.source] The source, if already preloaded.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\n     *        when play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @param {boolean} [options.loop=false] true to loop the audio playback.\n     * @return {PIXI.sound.Sound} Created sound instance.\n     */\n    public static from(source: string | Options | ArrayBuffer | HTMLAudioElement): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === \"string\")\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = {\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false, ...options};\n\n        // Resolve url in-case it has a special format\n        if (options.url)\n        {\n            options.url = resolveUrl(options.url);\n        }\n\n        Object.freeze(options);\n\n        const media: IMedia = getInstance().useLegacy ?\n            new HTMLAudioMedia() :\n            new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Constructor, use `PIXI.sound.Sound.from`\n     * @private\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.url = options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /**\n     * Instance of the media context\n     * @name PIXI.sound.Sound#context\n     * @type {PIXI.sound.IMediaContext}\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return getInstance().context;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#pause\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public pause(): Sound\n    {\n        this.isPlaying = false;\n        this.paused = true;\n        return this;\n    }\n\n    /**\n     * Resuming all the instances of this sound from playing\n     * @method PIXI.sound.Sound#resume\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public resume(): Sound\n    {\n        this.isPlaying = this._instances.length > 0;\n        this.paused = false;\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @name PIXI.sound.Sound#paused\n     * @type {boolean}\n     * @readonly\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * The playback rate\n     * @name PIXI.sound.Sound#speed\n     * @type {number}\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Set the filters. Only supported with WebAudio.\n     * @name PIXI.sound.Sound#filters\n     * @type {Array<PIXI.sound.filters.Filter>}\n     */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @return {PIXI.sound.SoundSprite} Sound sprite result.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {Object} data Map of sounds to add where the key is the alias,\n     *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\n     * @return {Object} The map of sound sprites added.\n     */\n    public addSprites(sprites: {[id: string]: SoundSpriteData}): SoundSprites;\n\n    // Actual implementation\n    public addSprites(\n        source: string | {[id: string]: SoundSpriteData},\n        data?: SoundSpriteData): SoundSprite | SoundSprites\n    {\n        if (typeof source === \"object\")\n        {\n            const results: SoundSprites = {};\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // tslint:disable-next-line no-console\n            console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n            const sprite = new SoundSprite(this, data);\n            this._sprites[source] = sprite;\n            return sprite;\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @method PIXI.sound.Sound#destroy\n     */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove all sound sprites.\n     * @method PIXI.sound.Sound#removeSprites\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n\n    /**\n     * Remove a sound sprite.\n     * @method PIXI.sound.Sound#removeSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * If the current sound is playable (loaded).\n     * @name PIXI.sound.Sound#isPlayable\n     * @type {boolean}\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#stop\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public stop(): Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#play\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.Sound#play\n     * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {number} [options.start=0] Time when to play the sound in seconds.\n     * @param {number} [options.end] Time to end playing in seconds.\n     * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {number} [options.volume] Current volume amount for instance.\n     * @param {boolean} [options.muted] Override default muted, default to the Sound's muted setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string | PlayOptions | CompleteCallback,\n                callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: any, complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === \"string\")\n        {\n            const sprite: string = source as string;\n            options = { sprite, loop: this.loop, complete };\n        }\n        else if (typeof source === \"function\")\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = {\n            complete: null,\n            loaded: null,\n            sprite: null,\n            end: null,\n            start: 0,\n            volume: 1,\n            speed: 1,\n            muted: false,\n            loop: false, ...(options || {})};\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n            // tslint:disable-next-line no-console\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            const sprite: SoundSprite = this._sprites[alias];\n            options.start = sprite.start;\n            options.end = sprite.end;\n            options.speed = sprite.speed || 1;\n            options.loop = sprite.loop || options.loop;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset) {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._preload((err: Error, sound: Sound, media: IMediaInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, media);\n                        }\n                        resolve(media);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once(\"end\", () => {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once(\"stop\", () => {\n            this._onComplete(instance);\n        });\n\n        instance.play(options);\n\n        return instance;\n    }\n\n    /**\n     * Internal only, speed, loop, volume change occured.\n     * @method refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refresh();\n        }\n    }\n\n    /**\n     * Handle changes in paused state. Internal only.\n     * @method refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refreshPaused();\n        }\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name PIXI.sound.Sound#volume\n     * @type {number}\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the muted flag.\n     * @name PIXI.sound.Sound#muted\n     * @type {number}\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name PIXI.sound.Sound#loop\n     * @type {boolean}\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method PIXI.sound.Sound#_preload\n     * @private\n     */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name PIXI.sound.Sound#instances\n     * @type {Array<PIXI.sound.IMediaInstance>}\n     * @readonly\n     */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /**\n     * Get the map of sprites.\n     * @name PIXI.sound.Sound#sprites\n     * @type {Object}\n     * @readonly\n     */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /**\n     * Get the duration of the audio in seconds.\n     * @name PIXI.sound.Sound#duration\n     * @type {number}\n     */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /**\n     * Auto play the first instance.\n     * @method PIXI.sound.Sound#autoPlayStart\n     * @private\n     */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n        return instance;\n    }\n\n    /**\n     * Removes all instances.\n     * @method PIXI.sound.Sound#_removeInstances\n     * @private\n     */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @method PIXI.sound.Sound#_onComplete\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /**\n     * Create a new instance.\n     * @method PIXI.sound.Sound#_createInstance\n     * @private\n     * @return {PIXI.sound.IMediaInstance} New instance to use\n     */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n            instance.init(this.media);\n            return instance;\n        }\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @method PIXI.sound.Sound#_poolInstance\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n","import { Filterable } from \"./Filterable\";\nimport { Filter } from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport { getInstance } from \"./instance\";\nimport { IMediaContext, IMediaInstance } from \"./interfaces\";\nimport { SoundLoader } from \"./loader\";\nimport { CompleteCallback, Options, PlayOptions, Sound } from \"./Sound\";\nimport * as webaudio from \"./webaudio\";\n\nexport type SoundMap = {[id: string]: Options | string | ArrayBuffer | HTMLAudioElement};\n\n/**\n * Contains all of the functionality for using the **pixi-sound** library.\n * This is deisnged to play audio with WebAudio and fallback to HTML5.\n * @namespace PIXI.sound\n */\n\n/**\n * @description Manages the playback of sounds.\n * @class SoundLibrary\n * @memberof PIXI.sound\n * @private\n */\nexport class SoundLibrary\n{\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     * @name PIXI.sound#_useLegacy\n     * @type {boolean}\n     * @default false\n     * @private\n     */\n    private _useLegacy: boolean;\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#_context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _context: IMediaContext;\n\n    /**\n     * The WebAudio specific context\n     * @name PIXI.sound#_webAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _webAudioContext: webaudio.WebAudioContext;\n\n    /**\n     * The HTML Audio (legacy) context.\n     * @name PIXI.sound#_htmlAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _htmlAudioContext: htmlaudio.HTMLAudioContext;\n\n    /**\n     * The map of all sounds by alias.\n     * @name PIXI.sound#_sounds\n     * @type {Object}\n     * @private\n     */\n    private _sounds: {[id: string]: Sound};\n\n    constructor()\n    {\n        this.init();\n    }\n\n    /**\n     * Re-initialize the sound library, this will\n     * recreate the AudioContext. If there's a hardware-failure\n     * call `close` and then `init`.\n     * @method PIXI.sound#init\n     * @return {PIXI.sound} Sound instance\n     */\n    public init(): SoundLibrary\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new webaudio.WebAudioContext();\n        }\n        this._htmlAudioContext = new htmlaudio.HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n        return this;\n    }\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#context\n     * @readonly\n     * @type {PIXI.sound.IMediaContext}\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * // Adds a filter to pan all output left\n     * PIXI.sound.filtersAll = [\n     *     new PIXI.sound.filters.StereoFilter(-1)\n     * ];\n     * @name PIXI.sound#filtersAll\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n        return [];\n    }\n    public set filtersAll(filtersAll: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filtersAll;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     * @name PIXI.sound#supported\n     * @readonly\n     * @type {boolean}\n     */\n    public get supported(): boolean\n    {\n        return webaudio.WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {PIXI.sound.Sound} sound Sound reference to use.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {ArrayBuffer|HTMLAudioElement} [options.source] If sound is already preloaded, available.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\n     *        play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n    public add(alias: string, options: Options | string | ArrayBuffer | HTMLAudioElement | Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @method PIXI.sound#add\n     * @param {Object} map Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link PIXI.sound.add} for options).\n     * @param {Object} globalOptions The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return {PIXI.sound.Sound} Instance to the Sound object.\n     */\n    public add(map: SoundMap, globalOptions?: Options): {[id: string]: Sound};\n\n    // Actual method\n    public add(source: string | SoundMap, sourceOptions?: Options | string | ArrayBuffer | HTMLAudioElement | Sound):\n        {[id: string]: Sound} | Sound\n    {\n        if (typeof source === \"object\")\n        {\n            const results: {[id: string]: Sound} = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n                results[alias] = this.add(alias, options);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // tslint:disable-next-line no-console\n            console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n\n            if (sourceOptions instanceof Sound)\n            {\n                this._sounds[source] = sourceOptions;\n                return sourceOptions;\n            }\n            else\n            {\n                const options: Options = this._getOptions(sourceOptions);\n                const sound: Sound = Sound.from(options);\n                this._sounds[source] = sound;\n                return sound;\n            }\n        }\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @method PIXI.sound#_getOptions\n     * @private\n     * @param {string|ArrayBuffer|HTMLAudioElement|Object} source The source options\n     * @param {Object} [overrides] Override default options\n     * @return {Object} The construction options\n     */\n    private _getOptions(source: string | ArrayBuffer | HTMLAudioElement | Options, overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === \"string\")\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        options = {...options, ...(overrides || {})};\n\n        return options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n     * @name PIXI.sound#useLegacy\n     * @type {boolean}\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        SoundLoader.legacy = legacy;\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        this._context = (!legacy && this.supported) ?\n            this._webAudioContext :\n            this._htmlAudioContext;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method PIXI.sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public remove(alias: string): SoundLibrary\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\n     * @name PIXI.sound#volumeAll\n     * @type {number}\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n        this._context.refresh();\n    }\n\n    /**\n     * Set the global speed for all sounds. To set per-sound speed see {@link PIXI.sound#speed}.\n     * @name PIXI.sound#speedAll\n     * @type {number}\n     */\n    public get speedAll(): number\n    {\n        return this._context.speed;\n    }\n    public set speedAll(speed: number)\n    {\n        this._context.speed = speed;\n        this._context.refresh();\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @method PIXI.sound#togglePauseAll\n     * @return {boolean} `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method PIXI.sound#pauseAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public pauseAll(): SoundLibrary\n    {\n        this._context.paused = true;\n        this._context.refreshPaused();\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method PIXI.sound#resumeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resumeAll(): SoundLibrary\n    {\n        this._context.paused = false;\n        this._context.refreshPaused();\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @method PIXI.sound#toggleMuteAll\n     * @return {boolean} `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method PIXI.sound#muteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public muteAll(): SoundLibrary\n    {\n        this._context.muted = true;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method PIXI.sound#unmuteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public unmuteAll(): SoundLibrary\n    {\n        this._context.muted = false;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method PIXI.sound#removeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public removeAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method PIXI.sound#stopAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public stopAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method PIXI.sound#exists\n     * @param {String} alias Check for alias.\n     * @return {boolean} true if the sound exists.\n     */\n    public exists(alias: string, assert: boolean= false): boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            // tslint:disable-next-line no-console\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @method PIXI.sound#find\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {String} sprite The alias of the sprite to play.\n     * @return {PIXI.sound.IMediaInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {number} [options.start=0] Start time offset.\n     * @param {number} [options.end] End time offset.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(\n        alias: string,\n        options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method PIXI.sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method PIXI.sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method PIXI.sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @method PIXI.sound#volume\n     * @param {String} alias The sound alias reference.\n     * @param {number} [volume] Optional current volume to set.\n     * @return {number} The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n        if (volume !== undefined) {\n            sound.volume = volume;\n        }\n        return sound.volume;\n    }\n\n    /**\n     * Get or set the speed for a sound.\n     * @method PIXI.sound#speed\n     * @param {String} alias The sound alias reference.\n     * @param {number} [speed] Optional current speed to set.\n     * @return {number} The current speed.\n     */\n    public speed(alias: string, speed?: number): number\n    {\n        const sound = this.find(alias);\n        if (speed !== undefined) {\n            sound.speed = speed;\n        }\n        return sound.speed;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @method PIXI.sound#duration\n     * @param {String} alias The sound alias reference.\n     * @return {number} The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Closes the sound library. This will release/destroy\n     * the AudioContext(s). Can be used safely if you want to\n     * initialize the sound library later. Use `init` method.\n     * @method PIXI.sound#close\n     * @return {PIXI.sound}\n     */\n    public close(): SoundLibrary\n    {\n        this.removeAll();\n        this._sounds = null;\n        if (this._webAudioContext)\n        {\n            this._webAudioContext.destroy();\n            this._webAudioContext = null;\n        }\n        if (this._htmlAudioContext)\n        {\n            this._htmlAudioContext.destroy();\n            this._htmlAudioContext = null;\n        }\n        this._context = null;\n        return this;\n    }\n}\n","import { getInstance } from \"../instance\";\n\n/**\n * Increment the alias for play once\n * @static\n * @private\n * @default 0\n */\nexport let PLAY_ID = 0;\n\n/**\n * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n * @method PIXI.sound.utils.playOnce\n * @static\n * @param {String} fileName Full path of the file to play.\n * @param {Function} callback Callback when complete.\n * @return {string} New audio element alias.\n */\nexport function playOnce(url: string, callback?: (err?: Error) => void): string\n{\n    const alias = `alias${PLAY_ID++}`;\n\n    getInstance().add(alias, {\n        url,\n        preload: true,\n        autoPlay: true,\n        loaded: (err: Error) => {\n            if (err)\n            {\n                console.error(err);\n                getInstance().remove(alias);\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n        },\n        complete: () => {\n            getInstance().remove(alias);\n            if (callback)\n            {\n                callback(null);\n            }\n        },\n    });\n    return alias;\n}\n","import { BaseTexture } from \"@pixi/core\";\nimport { Sound } from \"../Sound\";\nimport { WebAudioContext, WebAudioMedia } from \"../webaudio\";\n\nexport interface RenderOptions {\n    width?: number;\n    height?: number;\n    fill?: string | CanvasPattern | CanvasGradient;\n}\n\n/**\n * Render image as Texture. **Only supported with WebAudio**\n * @method PIXI.sound.utils.render\n * @param {PIXI.sound.Sound} sound Instance of sound to render\n * @param {Object} [options] Custom rendering options\n * @param {number} [options.width=512] Width of the render\n * @param {number} [options.height=128] Height of the render\n * @param {string|CanvasPattern|CanvasGradient} [options.fill='black'] Fill style for waveform\n * @return {PIXI.BaseTexture} Result texture\n */\nexport function render(sound: Sound, options?: RenderOptions): BaseTexture\n{\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n    options = {\n        width: 512,\n        height: 128,\n        fill: \"black\", ...(options || {})};\n\n    canvas.width = options.width;\n    canvas.height = options.height;\n\n    const baseTexture = BaseTexture.from(canvas);\n\n    if (!(sound.media instanceof WebAudioMedia))\n    {\n        return baseTexture;\n    }\n\n    const media: WebAudioMedia = sound.media as WebAudioMedia;\n    // tslint:disable-next-line no-console\n    console.assert(!!media.buffer, \"No buffer found, load first\");\n\n    const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n    context.fillStyle = options.fill;\n    const data: Float32Array = media.buffer.getChannelData(0);\n    const step: number = Math.ceil(data.length / options.width);\n    const amp: number = options.height / 2;\n\n    for (let i: number = 0; i < options.width; i++)\n    {\n        let min: number = 1.0;\n        let max: number = -1.0;\n\n        for (let j: number = 0; j < step; j++)\n        {\n            const datum: number = data[(i * step) + j];\n\n            if (datum < min)\n            {\n                min = datum;\n            }\n            if (datum > max)\n            {\n                max = datum;\n            }\n        }\n        context.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));\n    }\n    return baseTexture;\n}\n","import { Sound } from \"../Sound\";\nimport { WebAudioContext, WebAudioMedia } from \"../webaudio\";\n\n/**\n * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\n * @method PIXI.sound.utils.sineTone\n * @param {number} [hertz=200] Frequency of sound.\n * @param {number} [seconds=1] Duration of sound in seconds.\n * @return {PIXI.sound.Sound} New sound.\n */\nexport function sineTone(hertz: number = 200, seconds: number = 1): Sound\n{\n    const sound = Sound.from({\n        singleInstance: true,\n    });\n\n    if (!(sound.media instanceof WebAudioMedia))\n    {\n        return sound;\n    }\n\n    const media = sound.media as WebAudioMedia;\n    const context = sound.context as WebAudioContext;\n\n    // set default value\n    const nChannels = 1;\n    const sampleRate = 48000;\n    const amplitude = 2;\n\n    // create the buffer\n    const buffer = context.audioContext.createBuffer(\n        nChannels,\n        seconds * sampleRate,\n        sampleRate,\n    );\n    const fArray = buffer.getChannelData(0);\n\n    // fill the buffer\n    for (let i = 0; i < fArray.length; i++)\n    {\n        const time  = i / buffer.sampleRate;\n        const angle = hertz * time * Math.PI;\n        fArray[i] = Math.sin(angle) * amplitude;\n    }\n\n    // set the buffer\n    media.buffer = buffer;\n    sound.isLoaded = true;\n    return sound;\n}\n","/// <reference types=\"pixi.js\" />\n\n/**\n * Global namespace provided by the PixiJS project.\n * @namespace PIXI\n * @see https://github.com/pixijs/pixi.js\n */\nimport { Loader } from \"@pixi/loaders\";\nimport { Filterable } from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport { getInstance, setInstance } from \"./instance\";\nimport { SoundLoader } from \"./loader\";\nimport { Sound } from \"./Sound\";\nimport { SoundLibrary } from \"./SoundLibrary\";\nimport { SoundSprite } from \"./sprites\";\nimport * as utils from \"./utils\";\nimport * as webaudio from \"./webaudio\";\n\nconst sound = setInstance(new SoundLibrary());\n\n// Add the loader plugin\nLoader.registerPlugin(SoundLoader);\n\n// Export\nObject.defineProperties(sound,\n{\n    Filterable: { get() { return Filterable; } },\n    filters: { get() { return filters; } },\n    htmlaudio: { get() { return htmlaudio; } },\n    Sound: { get() { return Sound; } },\n    SoundLibrary: { get() { return SoundLibrary; } },\n    SoundSprite: { get() { return SoundSprite; } },\n    utils: { get() { return utils; } },\n    webaudio: { get() { return webaudio; } },\n    sound: { get() { return sound; } },\n});\n\nexport default sound;\n"],"names":["input","output","this","_output","_input","Object","Filterable","_filters","filters","forEach","filter","disconnect","connect","length","slice","prevFilter_1","_this","destination","source","init","Filter","instance","getInstance","WebAudioUtils","param","value","setValueAtTime","context","audioContext","currentTime","id","media","_super","_media","_paused","_muted","_elapsed","tslib_1.__extends","WebAudioInstance","name","undefined","Error","_source","_internalStop","emit","_speed","speed","refresh","_update","_volume","volume","muted","_loop","loop","global","sound","parent","globalVolume","soundVolume","instanceVolume","setParamValue","_gain","gain","playbackRate","pausedReal","paused","_pausedReal","play","start","_duration","end","_end","options","_a","duration","buffer","_lastUpdate","_now","onended","_onComplete","bind","loopEnd","loopStart","_enabled","time","enabled","Ticker","shared","remove","_updateListener","add","_progress","refreshPaused","removeAllListeners","events","off","force","now","delta","progress","soundLength","on","stop","EventEmitter","bufferSource","createBufferSource","createGain","analyser","createAnalyser","WebAudioNodes","_script","createScriptProcessor","BUFFER_SIZE","destroy","orig","script","bufferSize","WebAudioMedia","_nodes","callback","_decode","url","_loadUrl","request","XMLHttpRequest","open","responseType","onload","response","send","arrayBuffer","decode","err","isLoaded","autoPlayStart","win","window","ctx","WebAudioContext","AudioContext","compressor","createDynamicsCompressor","_ctx","_offlineCtx","OfflineAudioContext","sampleRate","_unlocked","state","_unlock","document","addEventListener","playEmptySound","removeEventListener","createBuffer","resume","webkitAudioContext","webkitOfflineAudioContext","close","suspend","decodeAudioData","message","f32","f64","f125","f250","f500","f1k","f2k","f4k","f8k","f16k","useLegacy","bands","f","EqualizerFilter","F32","type","F64","F125","F250","F500","F1K","F2K","F4K","F8K","F16K","map","band","node","createBiquadFilter","Q","frequency","bandsMap","i","getGain","setGain","amount","distortion","createWaveShaper","_distortion","DistortionFilter","_amount","x","curve","Float32Array","deg","Math","PI","abs","oversample","pan","stereo","panner","createStereoPanner","createPanner","panningModel","_stereo","_panner","StereoFilter","_pan","setPosition","seconds","decay","reverse","_seconds","_clamp","_decay","_reverse","_rebuild","ReverbFilter","min","max","n","rate","impulse","impulseL","getChannelData","impulseR","random","pow","convolver","createConvolver","splitter","createChannelSplitter","merger","createChannelMerger","_merger","MonoFilter","lpf1","lpf2","hpf1","hpf2","HTMLAudioInstance","_playing","cloneNode","src","onplay","_onPlay","onpause","_onPause","pause","_start","PADDING","onloadedmetadata","_onUpdate","HTMLAudioMedia","Audio","readyState","load","removeListeners","onLoad","onAbort","onError","error","code","instance_1","setTimeout","HTMLAudioContext","extensions","overrides","audio","formats","no","supported","m4a","oga","createElement","ext","canByExt","canPlayType","replace","canByType","freeze","FORMAT_PATTERN","resolveUrl","glob","test","match","exec","exts","split","len","resolved","extension","SoundLoader","legacy","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","DEFAULT","setExtensionLoadType","LOAD_TYPE","AUDIO","BUFFER","XHR","resource","next","data","indexOf","loaded","preload","assign","SoundSprite","complete","_instances","_sprites","_autoPlayOptions","isPlaying","autoPlay","singleInstance","sprites","addSprites","_preload","Sound","ArrayBuffer","HTMLAudioElement","results","alias","sprite","_removeInstances","removeSprites","isPlayable","offset","Promise","resolve","reject","_createInstance","push","once","_poolInstance","index","splice","_pool","pop","create","SoundLibrary","_webAudioContext","webaudio.WebAudioContext","_htmlAudioContext","htmlaudio.HTMLAudioContext","_sounds","_context","filtersAll","sourceOptions","_getOptions","from","_useLegacy","exists","togglePause","toggleMute","assert","find","removeAll","PLAY_ID","canvas","width","height","fill","baseTexture","BaseTexture","getContext","fillStyle","step","ceil","amp","j","datum","fillRect","hertz","fArray","angle","sin","setInstance","registerPlugin","defineProperties","get","htmlaudio","utils","webaudio"],"mappings":"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"}