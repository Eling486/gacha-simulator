{"version":3,"sources":["../src/dust.js"],"names":[],"mappings":"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","file":"dust.js","sourcesContent":["class Dust {\n  constructor(renderingEngine = PIXI) {\n    if (renderingEngine === undefined) throw new Error(\"Please assign a rendering engine in the constructor before using pixiDust.js\");\n\n    //Find out which rendering engine is being used (the default is Pixi)\n    this.renderer = \"\";\n\n    //If the `renderingEngine` is Pixi, set up Pixi object aliases\n    if (renderingEngine.ParticleContainer) {\n      this.Container = renderingEngine.Container;\n      this.renderer = \"pixi\";\n    }\n\n    //The `particles` array stores all the particles you make\n    this.globalParticles = [];\n  }\n\n  //Random number functions\n  randomFloat(min, max) {\n    return min + Math.random() * (max - min);\n  }\n  randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  //Use the create function to create new particle effects\n  create(\n    x = 0,\n    y = 0,\n    spriteFunction = () => console.log(\"Sprite creation function\"),\n    container = () => new this.Container(),\n    numberOfParticles = 20,\n    gravity = 0,\n    randomSpacing = true,\n    minAngle = 0, maxAngle = 6.28,\n    minSize = 4, maxSize = 16,\n    minSpeed = 0.3, maxSpeed = 3,\n    minScaleSpeed = 0.01, maxScaleSpeed = 0.05,\n    minAlphaSpeed = 0.02, maxAlphaSpeed = 0.02,\n    minRotationSpeed = 0.01, maxRotationSpeed = 0.03\n  ) {\n\n    //An array to store the curent batch of particles\n    let particles = [];\n\n    //Add the current `particles` array to the `globalParticles` array\n    this.globalParticles.push(particles);\n\n    //An array to store the angles\n    let angles = [];\n\n    //A variable to store the current particle's angle\n    let angle;\n\n    //Figure out by how many radians each particle should be separated\n    let spacing = (maxAngle - minAngle) / (numberOfParticles - 1);\n\n    //Create an angle value for each particle and push that //value into the `angles` array\n    for (let i = 0; i < numberOfParticles; i++) {\n\n      //If `randomSpacing` is `true`, give the particle any angle \n      //value between `minAngle` and `maxAngle`\n      if (randomSpacing) {\n        angle = this.randomFloat(minAngle, maxAngle);\n        angles.push(angle);\n      }\n\n      //If `randomSpacing` is `false`, space each particle evenly, \n      //starting with the `minAngle` and ending with the `maxAngle`\n      else {\n        if (angle === undefined) angle = minAngle;\n        angles.push(angle);\n        angle += spacing;\n      }\n    }\n\n    //A function to make particles\n    let makeParticle = (angle) => {\n\n      //Create the particle using the supplied sprite function\n      let particle = spriteFunction();\n\n      //Display a random frame if the particle has more than 1 frame\n      if (particle.totalFrames > 0) {\n        particle.gotoAndStop(this.randomInt(0, particle.totalFrames - 1));\n      }\n\n      //Set a random width and height\n      let size = this.randomInt(minSize, maxSize);\n      particle.width = size;\n      particle.height = size;\n\n      //Set the particle's `anchor` to its center\n      particle.anchor.set(0.5, 0.5);\n\n      //Set the x and y position\n      particle.x = x;\n      particle.y = y;\n\n      //Set a random speed to change the scale, alpha and rotation\n      particle.scaleSpeed = this.randomFloat(minScaleSpeed, maxScaleSpeed);\n      particle.alphaSpeed = this.randomFloat(minAlphaSpeed, maxAlphaSpeed);\n      particle.rotationSpeed = this.randomFloat(minRotationSpeed, maxRotationSpeed);\n\n      //Set a random velocity at which the particle should move\n      let speed = this.randomFloat(minSpeed, maxSpeed);\n      particle.vx = speed * Math.cos(angle);\n      particle.vy = speed * Math.sin(angle);\n\n      //Push the particle into the `particles` array.\n      //The `particles` array needs to be updated by the game loop each frame particles.push(particle);\n      particles.push(particle);\n\n      //Add the particle to its parent container\n      container.addChild(particle);\n\n      //The particle's `updateParticle` method is called on each frame of the \n      //game loop\n      particle.updateParticle = () => {\n\n        //Add gravity\n        particle.vy += gravity;\n\n        //Move the particle\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        //Change the particle's `scale`\n        if (particle.scale.x - particle.scaleSpeed > 0) {\n          particle.scale.x -= particle.scaleSpeed;\n        }\n        if (particle.scale.y - particle.scaleSpeed > 0) {\n          particle.scale.y -= particle.scaleSpeed;\n        }\n\n        //Change the particle's rotation\n        particle.rotation += particle.rotationSpeed;\n\n        //Change the particle's `alpha`\n        particle.alpha -= particle.alphaSpeed;\n\n        //Remove the particle if its `alpha` reaches zero\n        if (particle.alpha <= 0) {\n          container.removeChild(particle);\n          particles.splice(particles.indexOf(particle), 1);\n        }\n      };\n    };\n\n    //Make a particle for each angle\n    angles.forEach(angle => makeParticle(angle));\n\n    //Return the `particles` array back to the main program\n    return particles;\n  }\n\n  //A particle emitter\n  emitter(interval, particleFunction) {\n    let emitterObject = {},\n      timerInterval = undefined;\n\n    emitterObject.playing = false;\n\n    function play() {\n      if (!emitterObject.playing) {\n        particleFunction();\n        timerInterval = setInterval(emitParticle.bind(this), interval);\n        emitterObject.playing = true;\n      }\n    }\n\n    function stop() {\n      if (emitterObject.playing) {\n        clearInterval(timerInterval);\n        emitterObject.playing = false;\n      }\n    }\n\n    function emitParticle() {\n      particleFunction();\n    }\n\n    emitterObject.play = play;\n    emitterObject.stop = stop;\n    return emitterObject;\n  }\n\n  //A function to update the particles in the game loop\n  update() {\n\n    //Check so see if the `globalParticles` array contains any\n    //sub-arrays\n    if (this.globalParticles.length > 0) {\n\n      //If it does, Loop through the particle arrays in reverse\n      for (let i = this.globalParticles.length - 1; i >= 0; i--) {\n\n        //Get the current particle sub-array\n        let particles = this.globalParticles[i];\n\n        //Loop through the `particles` sub-array and update the\n        //all the particle sprites that it contains\n        if (particles.length > 0) {\n          for (let j = particles.length - 1; j >= 0; j--) {\n            let particle = particles[j];\n            particle.updateParticle();\n          }\n        }\n\n        //Remove the particle array from the `globalParticles` array if doesn't\n        //contain any more sprites\n        else {\n          this.globalParticles.splice(this.globalParticles.indexOf(particles), 1);\n        }\n      }\n    }\n  }\n}"]}